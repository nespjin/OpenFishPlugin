import org.gradle.internal.jvm.Jvm

/*
 *
 *   Copyright (c) 2021  NESP Technology Corporation. All rights reserved.
 *
 *   This program is not free software; you can't redistribute it and/or modify it
 *   without the permit of team manager.
 *
 *   Unless required by applicable law or agreed to in writing.
 *
 *   If you have any questions or if you find a bug,
 *   please contact the author by email or ask for Issues.
 *
 *   Author:JinZhaolu <1756404649@qq.com>
 */

plugins {
    id 'java'
    id 'application'
    id 'c'
    id 'io.github.nespjin.javafx' version "1.1"
    id 'org.openjfx.javafxplugin'
}

apply plugin: 'kotlin'
//apply plugin: 'com.gluonhq.gluonfx-gradle-plugin'
apply from: 'deploy.gradle'

group 'com.nesp.fishplugin.editor'
version project.versionName

nespJfx {
    defaultConfig {
        versionCode = project.versionCode
        versionName = project.versionName
        debug = project.debug
    }

    viewBinding = true
}

mainClassName = "com.nesp.fishplugin.editor.App"

compileKotlin {
    kotlinOptions.jvmTarget = "17"
}

sourceCompatibility = "17"
targetCompatibility = "17"

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

processResources {
    from('src/main/resources') {
        include '**/**'
        duplicatesStrategy DuplicatesStrategy.INCLUDE
    }
}

distTar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

distZip {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    archiveFileName = project.mainJar

    configurations.implementation.setCanBeResolved(true)

    manifest {
        attributes 'Main-Class': mainClassName
    }

    // Filter dependencies
/*    from sourceSets.main.output

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll {
            it.name.startsWith("kotlin-stdlib") && it.name.endsWith('jar')
        }.collect { zipTree(it) }
    }*/

}
test {
    useJUnitPlatform()
}


ext {
    jfxVersion = '17.0.1'
}

javafx {
    version = jfxVersion
    // Add JavaFx modules
    modules = ['javafx.base', 'javafx.graphics', 'javafx.controls', 'javafx.fxml']
}

/*gluonfx {
    attachConfig {
        version = "$jfxVersion"
        configuration = "implementation"
    }

    bundlesList = []
    resourcesList = ["src/main/resources"]
    reflectionList = []
    jniList = []

    compilerArgs = ["--no-fallback54q"]
    runtimeArgs = []

    javaStaticSdkVersion = "11"
    javafxStaticSdkVersion = "$jfxVersion"
//    graalvmHome "/home/jinzhaolu/graalvm-svm-linux-gluon-21.2.0-dev"

    verbose = false
    enableSwRendering = false

    remoteHostName = ""
    remoteDir = ""

    release {
        // Android
        appLabel = ""
        versionCode = "1"
        versionName = "1.0"
        providedKeyStorePath = ""
        providedKeyStorePassword = ""
        providedKeyAlias = ""
        providedKeyAliasPassword = ""
        // iOS
        bundleName = ""
        bundleVersion = ""
        bundleShortVersion = ""
        providedSigningIdentity = ""
        providedProvisioningProfile = ""
        skipSigning = false
    }
}*/

test {
    systemProperty "java.library.path", file("${buildDir}/libs/hello/shared").absolutePath
}

model {
    platforms {
        x64 {
            architecture "x64"
        }
    }

    components {
        hello(NativeLibrarySpec) {
            binaries.all {
                if (targetPlatform.operatingSystem.macOsX) {
                    cCompiler.args '-I', "${Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${Jvm.current().javaHome}/include/darwin"
                    cCompiler.args '-mmacosx-version-min=10.4'
                    linker.args '-mmacosx-version-min=10.4'
                } else if (targetPlatform.operatingSystem.linux) {
                    cCompiler.args '-I', "${Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${Jvm.current().javaHome}/include/linux"
                    cCompiler.args '-D_FILE_OFFSET_BITS=64'
                } else if (targetPlatform.operatingSystem.windows) {
                    cCompiler.args "-I${Jvm.current().javaHome}/include"
                    cCompiler.args "-I${Jvm.current().javaHome}/include/win32"
                    linker.args "Shlwapi.lib", "Advapi32.lib"
                } else if (targetPlatform.operatingSystem.freeBSD) {
                    cCompiler.args '-I', "${Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${Jvm.current().javaHome}/include/freebsd"
                }
            }
        }
    }
}

test.dependsOn 'helloSharedLibrary'

dependencies {
    implementation fileTree(dir: 'libs', includes: ['*.jar'])

    def junitVersion = '5.8.2'
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")

    implementation project(':nesp-sdk-java')
    implementation project(':nesp-sdk-kotlin')
    implementation project(':nesp-sdk-javafx')
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.6.10'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.6.10'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:1.6.0-native-mt'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-javafx:1.6.0-native-mt'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.0'
    implementation 'no.tornado:tornadofx:1.7.20'

    implementation 'com.google.code.gson:gson:2.8.9'
    implementation 'com.google.guava:guava:31.0.1-jre'

    implementation 'com.alibaba:fastjson:1.2.79'
    implementation 'org.json:json:20211205'

    implementation project(path: ':core')
    implementation project(path: ':compiler')
    implementation project(path: ':packager')

//    implementation 'log4j:log4j:1.2.17'
//    implementation 'org.apache.logging.log4j:log4j:2.17.1' // Not work present
    implementation 'org.apache.commons:commons-io:1.3.2'

    implementation 'org.fxmisc.richtext:richtextfx:0.10.7'
    implementation 'com.belerweb:pinyin4j:2.5.1'
    implementation project(path: ':runtime')
    implementation project(path: ':runtime-javafx')
    implementation project(path: ':movie-runtime-javafx')
}
